version: '3'

services:
  db:
    image: mysql
    build:
      context: mysql
    container_name: db
    restart: unless-stopped
    env_file: ./mysql/.env
    environment:
      - MYSQL_DATABASE=myappdb1
    volumes: 
      - ./mysql/dbdata:/var/lib/mysql
    command: '--default-authentication-plugin=mysql_native_password'
    networks:
      - app-network

  webserver:
    depends_on:
      - db
    image: nginx-phpfpm
    build: 
        context: nginx-phpfpm
    container_name: webserver
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "2222:22"
    volumes:
      - ./app:/var/www/html
      - ./nginx-phpfpm/nginx-conf:/etc/nginx/conf.d
      - ./logs:/var/log/nginx
    networks:
      - app-network

volumes:
  app:
  dbdata:

networks:
  app-network:
    driver: bridge  

# docker-compose up --build --force-recreate -d
# curl  "$(curl ifconfig.me)"

# ONly building for Dockerhub (point to the dockerfile ./nginx-phpfpm/.)
# sudo docker build -t ajaykumar011/ubuntu20-04-all-in-one:latest ./nginx-phpfpm/.
# docker login 

# docker login --username ajaykumar011 --password @f3d3ra1
# docker push ajaykumar011/ubuntu20-04-all-in-one:latest

# Building for ECR
# sudo docker build -t 143787628822.dkr.ecr.ap-south-1.amazonaws.com/ubuntu20-04-all-in-one:1.0.1 ./nginx-phpfpm/.


# docker inspect webserver
# docker-compose logs && docker-compose events --json
# docker-compose ps  & # docker-compose top
# docker-compose port
# docker-compose exec --user ROOT --env KEY=VAL --workdir DIR --detach
# docker-compose down -v --rmi=all --volumes --remove-orphans
# docker system prune -f
# docker stop $(docker ps -aq)
# docker rm $(docker ps -aq)
# docker rmi $(docker images -q)
